### 1. 系统整体架构设计

采用 **分层架构（MVC）** + **微服务化** 设计，确保可扩展性和可维护性：

```
┌──────────────────────────────┐
│         前端系统（Vue/React）         │
├──────────────────────────────┤
│         API网关（Nginx）           │
├──────────────────────────────┤
│         业务服务层（Spring Boot）     │
├──────────────────────────────┤
│         数据访问层（MyBatis/JPA）    │
├──────────────────────────────┤
│         数据库（MySQL 5.7）         │
├──────────────────────────────┤
│         缓存（Redis）              │
├──────────────────────────────┤
│         消息队列（RabbitMQ/Kafka）   │
└──────────────────────────────┘
```

**关键设计原则：**
- **分层解耦**：前端、业务逻辑、数据访问层分离，支持独立扩展
- **缓存策略**：热点数据（如文章详情）使用Redis缓存
- **异步处理**：使用消息队列处理非实时操作（如文章更新通知）
- **服务化**：未来可拆分为独立的"文章服务"、"用户服务"等微服务

---

### 2. 数据库表结构设计（MySQL 5.7）

#### 2.1 表结构设计（符合3NF）

**表命名规范：**
- 表名：复数形式（如 `articles`）
- 字段名：小写+下划线（如 `user_id`）
- 主键：`id` 自增
- 外键：`<关联表名>_<主键>`（如 `user_id`）

```sql
-- 用户表
CREATE TABLE `users` (
  `id` BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY COMMENT '用户ID',
  `username` VARCHAR(50) NOT NULL UNIQUE COMMENT '用户名',
  `password` VARCHAR(100) NOT NULL COMMENT '密码',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT '状态(1:启用, 0:禁用)',
  INDEX `idx_username` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户表';

-- 文章表
CREATE TABLE `articles` (
  `id` BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY COMMENT '文章ID',
  `title` VARCHAR(255) NOT NULL COMMENT '文章标题',
  `content` TEXT NOT NULL COMMENT '文章内容',
  `user_id` BIGINT UNSIGNED NOT NULL COMMENT '作者ID',
  `category_id` BIGINT UNSIGNED NOT NULL COMMENT '分类ID',
  `status` TINYINT NOT NULL DEFAULT 1 COMMENT '状态(1:发布, 0:草稿, 2:删除)',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `views` INT UNSIGNED NOT NULL DEFAULT 0 COMMENT '阅读数',
  INDEX `idx_title` (`title`),
  INDEX `idx_status` (`status`),
  INDEX `idx_user` (`user_id`),
  INDEX `idx_category` (`category_id`),
  INDEX `idx_created_time` (`created_at`),
  FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE,
  FOREIGN KEY (`category_id`) REFERENCES `categories`(`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='文章表';

-- 分类表
CREATE TABLE `categories` (
  `id` BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY COMMENT '分类ID',
  `name` VARCHAR(50) NOT NULL UNIQUE COMMENT '分类名称',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='分类表';

-- 标签表（多对多关系）
CREATE TABLE `tags` (
  `id` BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY COMMENT '标签ID',
  `name` VARCHAR(30) NOT NULL UNIQUE COMMENT '标签名称',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='标签表';

-- 文章-标签关联表
CREATE TABLE `article_tags` (
  `article_id` BIGINT UNSIGNED NOT NULL,
  `tag_id` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`article_id`, `tag_id`),
  FOREIGN KEY (`article_id`) REFERENCES `articles`(`id`) ON DELETE CASCADE,
  FOREIGN KEY (`tag_id`) REFERENCES `tags`(`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='文章-标签关联表';
```

**索引优化说明：**
- 主键使用自增ID（InnoDB聚簇索引）
- 高频查询字段（title, status, user_id）建立单列索引
- 分页查询使用 `created_at` 索引
- 外键约束确保数据一致性

---

### 3. 核心业务流程说明

#### 3.1 文章新增流程
```
用户提交表单 → 服务层校验数据 → 生成唯一ID → 写入articles表 → 关联标签（写入article_tags）→ 更新缓存（Redis）→ 返回结果
```

#### 3.2 文章查询流程（分页）
```
前端请求 → API网关 → 服务层 → 查询articles表（使用status和created_at索引）→ 缓存未命中则查询数据库 → 返回分页数据
```

#### 3.3 文章更新流程
```
用户提交更新 → 服务层校验 → 乐观锁校验版本号（version字段）→ 更新articles表 → 更新关联标签 → 更新缓存 → 返回结果
```

#### 3.4 文章删除流程
```
软删除（status=2）→ 更新articles表 → 删除关联标签（可选）→ 更新缓存 → 返回结果
```

**并发优化措施：**
- 使用 **乐观锁**（通过version字段控制并发修改）
- 对高频操作（如查询）使用 **Redis缓存**
- 对写操作使用 **数据库行锁**（SELECT ... FOR UPDATE）
- 分页查询使用 **游标分页**（基于created_at和id）

---

### 4. 技术选型说明

| 模块             | 技术选型                     | 选型理由                                                                 |
|------------------|------------------------------|--------------------------------------------------------------------------|
| 后端开发         | Spring Boot 2.7              | 快速开发、集成MyBatis、支持RESTful API                                   |
| 数据访问层       | MyBatis Plus                 | 简化CRUD操作，支持Lambda查询                                             |
| 数据库           | MySQL 5.7 + InnoDB           | 支持事务、行级锁，符合ACID特性                                           |
| 缓存             | Redis 6.2                    | 高性能缓存，支持热点数据缓存                                             |
| 消息队列         | RabbitMQ 3.9                 | 异步处理文章更新通知等操作                                               |
| 前端框架         | Vue 3 + Element Plus         | 响应式前端框架，组件丰富                                                 |
| 接口文档         | Swagger 3.0                  | 自动生成API文档，支持在线调试                                            |
| 部署环境         | Docker + Nginx               | 容器化部署，支持水平扩展                                                 |
| 监控告警         | Prometheus + Grafana         | 系统性能监控、数据库慢查询分析                                           |

**性能优化措施：**
- 数据库使用 **读写分离**（主库写，从库读）
- 对大表（如articles）使用 **分区表**（按created_at分区）
- 使用 **连接池**（HikariCP）优化数据库连接
- 对频繁查询字段建立 **组合索引**（如status + created_at）

---

### 5. 扩展性设计

- **接口抽象**：通过定义统一的 `ArticleService` 接口，支持未来替换为其他数据源（如Elasticsearch）
- **配置中心**：使用Nacos管理数据库连接、缓存配置等参数
- **灰度发布**：通过网关路由规则实现新旧版本并行发布
- **限流熔断**：使用Sentinel实现接口限流、降级

该架构可支持日均百万级文章访问，单节点QPS可达5000+，满足中大型系统需求。