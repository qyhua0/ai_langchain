### 1. RESTful API接口清单

#### 1.1 用户管理接口
| 接口名称         | 请求方法 | 路径                  | 描述                   |
|------------------|----------|-----------------------|------------------------|
| 创建用户         | POST     | `/api/users`          | 创建新用户             |
| 获取用户信息     | GET      | `/api/users/{id}`     | 获取指定用户信息       |
| 更新用户信息     | PUT      | `/api/users/{id}`     | 更新用户信息           |
| 删除用户         | DELETE   | `/api/users/{id}`     | 软删除用户             |

#### 1.2 文章管理接口
| 接口名称         | 请求方法 | 路径                          | 描述                   |
|------------------|----------|-------------------------------|------------------------|
| 创建文章         | POST     | `/api/articles`               | 创建新文章             |
| 获取文章列表     | GET      | `/api/articles`               | 分页查询文章           |
| 获取文章详情     | GET      | `/api/articles/{id}`          | 获取指定文章详情       |
| 更新文章         | PUT      | `/api/articles/{id}`          | 更新文章内容           |
| 删除文章         | DELETE   | `/api/articles/{id}`          | 软删除文章             |
| 按标签查询文章   | GET      | `/api/articles/tags/{tagId}`  | 根据标签查询文章       |

#### 1.3 分类管理接口
| 接口名称         | 请求方法 | 路径                  | 描述                   |
|------------------|----------|-----------------------|------------------------|
| 创建分类         | POST     | `/api/categories`     | 创建新分类             |
| 获取分类列表     | GET      | `/api/categories`     | 查询所有分类           |
| 获取分类详情     | GET      | `/api/categories/{id}`| 获取指定分类信息       |
| 更新分类         | PUT      | `/api/categories/{id}`| 更新分类名称           |
| 删除分类         | DELETE   | `/api/categories/{id}`| 软删除分类             |

#### 1.4 标签管理接口
| 接口名称         | 请求方法 | 路径                  | 描述                   |
|------------------|----------|-----------------------|------------------------|
| 创建标签         | POST     | `/api/tags`           | 创建新标签             |
| 获取标签列表     | GET      | `/api/tags`           | 查询所有标签           |
| 获取标签详情     | GET      | `/api/tags/{id}`      | 获取指定标签信息       |
| 更新标签         | PUT      | `/api/tags/{id}`      | 更新标签名称           |
| 删除标签         | DELETE   | `/api/tags/{id}`      | 软删除标签             |

#### 1.5 文章-标签关联接口
| 接口名称         | 请求方法 | 路径                          | 描述                   |
|------------------|----------|-------------------------------|------------------------|
| 为文章添加标签   | POST     | `/api/articles/{articleId}/tags` | 为文章添加标签         |
| 从文章移除标签   | DELETE   | `/api/articles/{articleId}/tags/{tagId}` | 从文章移除标签       |

---

### 2. 请求/响应数据结构定义

#### 2.1 统一响应格式
```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    // 具体数据
  }
}
```

- **code**: HTTP状态码（如200、400、404、500）
- **message**: 简要描述（如“操作成功”、“参数错误”）
- **data**: 返回的具体数据（可选）

#### 2.2 请求参数定义

##### 2.2.1 创建用户（POST `/api/users`）
```json
{
  "username": "string",
  "password": "string"
}
```
- **username**: 必填，长度50以内，唯一
- **password**: 必填，长度100以内（加密存储）

##### 2.2.2 创建文章（POST `/api/articles`）
```json
{
  "title": "string",
  "content": "string",
  "userId": "long",
  "categoryId": "long",
  "tags": ["tag1", "tag2"]  // 标签名称列表
}
```
- **title**: 必填，长度255以内
- **content**: 必填，长度限制由数据库决定
- **userId**: 必填，必须存在
- **categoryId**: 必填，必须存在
- **tags**: 可选，标签名称列表（自动创建或关联现有标签）

##### 2.2.3 获取文章列表（GET `/api/articles`）
请求参数（Query String）：
- **page**: int（默认1）
- **pageSize**: int（默认10）
- **sortBy**: string（如"createAt"）
- **order**: string（"asc"或"desc"）
- **status**: int（0-未发布，1-已发布，2-草稿）
- **categoryId**: long（过滤指定分类）
- **tagId**: long（过滤指定标签）

##### 2.2.4 获取文章详情（GET `/api/articles/{id}`）
无请求体，路径参数：`id`（long）

##### 2.2.5 更新文章（PUT `/api/articles/{id}`）
```json
{
  "title": "string",
  "content": "string",
  "userId": "long",
  "categoryId": "long",
  "tags": ["tag1", "tag2"]
}
```
- **id**: 路径参数，必须存在
- **title**: 可选
- **content**: 可选
- **userId**: 可选（但需存在）
- **categoryId**: 可选（但需存在）
- **tags**: 可选（覆盖原有标签）

---

### 3. 错误码定义

| 错误码 | HTTP状态码 | 描述                   | 示例场景                         |
|--------|------------|------------------------|----------------------------------|
| 1001   | 400        | 参数错误               | 必填字段缺失或格式错误           |
| 1002   | 401        | 未授权                 | 未登录或令牌失效                 |
| 1003   | 403        | 权限不足               | 操作超出用户权限范围             |
| 1004   | 404        | 资源不存在             | 用户、文章、分类、标签不存在     |
| 1005   | 409        | 资源冲突               | 用户名重复、标签名称重复         |
| 1006   | 500        | 服务器内部错误         | 数据库异常、服务崩溃             |

---

### 4. API文档示例

#### 4.1 创建用户（POST `/api/users`）
**请求示例**：
```json
{
  "username": "john_doe",
  "password": "SecurePass123!"
}
```

**响应示例**：
```json
{
  "code": 201,
  "message": "用户创建成功",
  "data": {
    "id": 123,
    "username": "john_doe"
  }
}
```

#### 4.2 获取文章列表（GET `/api/articles`）
**请求参数**：
```
page=1&pageSize=5&status=1&categoryId=100
```

**响应示例**：
```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "articles": [
      {
        "id": 1,
        "title": "如何学习编程",
        "content": "编程学习需要...",
        "userId": 123,
        "categoryId": 100,
        "createAt": "2023-10-01T12:00:00Z"
      }
    ],
    "total": 100
  }
}
```

#### 4.3 获取文章详情（GET `/api/articles/1`）
**响应示例**：
```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "id": 1,
    "title": "如何学习编程",
    "content": "编程学习需要...",
    "userId": 123,
    "categoryId": 100,
    "tags": ["编程", "学习"],
    "createAt": "2023-10-01T12:00:00Z"
  }
}
```

#### 4.4 更新文章（PUT `/api/articles/1`）
**请求示例**：
```json
{
  "title": "如何高效学习编程",
  "content": "高效学习编程需要...",
  "userId": 123,
  "categoryId": 101,
  "tags": ["编程", "效率"]
}
```

**响应示例**：
```json
{
  "code": 200,
  "message": "文章更新成功",
  "data": {
    "id": 1,
    "title": "如何高效学习编程",
    "content": "高效学习编程需要...",
    "userId": 123,
    "categoryId": 101,
    "tags": ["编程", "效率"],
    "updateAt": "2023-10-02T08:00:00Z"
  }
}
```

#### 4.5 为文章添加标签（POST `/api/articles/1/tags`）
**请求示例**：
```json
{
  "tagIds": [200, 201]
}
```

**响应示例**：
```json
{
  "code": 200,
  "message": "标签添加成功",
  "data": {
    "articleId": 1,
    "addedTags": ["Python", "Java"]
  }
}
```

---

### 5. 其他说明

- **分页与排序**：所有分页接口支持`page`、`pageSize`、`sortBy`、`order`参数。
- **参数验证**：所有接口必须进行参数校验，如字段类型、长度、唯一性等。
- **错误处理**：所有错误返回统一格式，包含错误码、描述和可能的解决方案。
- **缓存策略**：文章详情和列表接口优先从Redis缓存获取数据，缓存未命中时查询数据库。

以上设计符合RESTful规范，确保接口的可读性、可扩展性和一致性。